{
  "$id": "https://serverlessworkflow.io/schemas/1.0.0-alpha2/workflow.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "Serverless Workflow DSL - Workflow Schema",
  "type": "object",
  "properties": {
    "document": {
      "type": "object",
      "properties": {
        "dsl": {
          "type": "string",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
          "description": "The version of the DSL used by the workflow."
        },
        "namespace": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$",
          "description": "The workflow's namespace."
        },
        "name": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$",
          "description": "The workflow's name."
        },
        "version": {
          "type": "string",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
          "description": "The workflow's semantic version."
        },
        "title": {
          "type": "string",
          "description": "The workflow's title."
        },
        "summary": {
          "type": "string",
          "description": "The workflow's Markdown summary."
        },
        "tags": {
          "type": "object",
          "description": "A key/value mapping of the workflow's tags, if any.",
          "additionalProperties": true,
          "title": "DocumentTags"
        }
      },
      "required": [
        "dsl",
        "namespace",
        "name",
        "version"
      ],
      "description": "Documents the workflow",
      "title": "Document"
    },
    "input": {
      "$ref": "#/$defs/input",
      "description": "Configures the workflow's input.",
      "type": "object",
      "title": "Input"
    },
    "use": {
      "type": "object",
      "properties": {
        "authentications": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/authenticationPolicy"
          },
          "description": "The workflow's reusable authentication policies.",
          "title": "UseAuthentications"
        },
        "errors": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/error"
          },
          "description": "The workflow's reusable errors.",
          "title": "UseErrors"
        },
        "extensions": {
          "type": "array",
          "items": {
            "type": "object",
            "minProperties": 1,
            "maxProperties": 1,
            "additionalProperties": {
              "$ref": "#/$defs/extension"
            }
          },
          "description": "The workflow's extensions.",
          "title": "UseExtensions"
        },
        "functions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/task"
          },
          "description": "The workflow's reusable functions.",
          "title": "UseFunctions"
        },
        "retries": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/retryPolicy"
          },
          "description": "The workflow's reusable retry policies.",
          "title": "UseRetries"
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The workflow's secrets."
        }
      },
      "description": "Defines the workflow's reusable components.",
      "title": "Use"
    },
    "do": {
      "description": "Defines the task(s) the workflow must perform",
      "$ref": "#/$defs/taskList",
      "type": "object",
      "title": "Do"
    },
    "timeout": {
      "$ref": "#/$defs/timeout",
      "description": "The workflow's timeout configuration, if any.",
      "type": "object",
      "title": "Timeout"
    },
    "output": {
      "$ref": "#/$defs/output",
      "description": "Configures the workflow's output.",
      "type": "object",
      "title": "Output"
    },
    "schedule": {
      "type": "object",
      "properties": {
        "every": {
          "$ref": "#/$defs/duration",
          "description": "Specifies the duration of the interval at which the workflow should be executed.",
          "type": "object",
          "title": "ScheduleEvery"
        },
        "cron": {
          "type": "string",
          "description": "Specifies the schedule using a cron expression, e.g., '0 0 * * *' for daily at midnight.\""
        },
        "after": {
          "$ref": "#/$defs/duration",
          "description": "Specifies a delay duration that the workflow must wait before starting again after it completes.",
          "type": "object",
          "title": "ScheduleAfter"
        },
        "on": {
          "$ref": "#/$defs/eventConsumptionStrategy",
          "description": "Specifies the events that trigger the workflow execution.",
          "type": "object",
          "title": "ScheduleOn"
        }
      },
      "description": "Schedules the workflow",
      "title": "Schedule"
    }
  },
  "$defs": {
    "taskList": {
      "type": "array",
      "items": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/task"
        }
      },
      "title": "TaskList"
    },
    "taskBase": {
      "type": "object",
      "properties": {
        "if": {
          "type": "string",
          "description": "A runtime expression, if any, used to determine whether or not the task should be run."
        },
        "input": {
          "$ref": "#/$defs/input",
          "description": "Configure the task's input.",
          "type": "object",
          "title": "TaskBaseInput"
        },
        "output": {
          "$ref": "#/$defs/output",
          "description": "Configure the task's output.",
          "type": "object",
          "title": "TaskBaseOutput"
        },
        "export": {
          "$ref": "#/$defs/export",
          "description": "Export task output to context.",
          "type": "object",
          "title": "TaskBaseExport"
        },
        "timeout": {
          "$ref": "#/$defs/timeout",
          "description": "The task's timeout configuration, if any.",
          "type": "object",
          "title": "TaskBaseTimeout"
        },
        "then": {
          "$ref": "#/$defs/flowDirective",
          "description": "The flow directive to be performed upon completion of the task.",
          "type": "object",
          "title": "TaskBaseThen"
        }
      },
      "title": "TaskBase"
    },
    "task": {
      "unevaluatedProperties": false,
      "oneOf": [
        {
          "$ref": "#/$defs/callTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/doTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/forkTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/emitTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/forTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/listenTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/raiseTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/runTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/setTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/switchTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/tryTask",
          "type": "object"
        },
        {
          "$ref": "#/$defs/waitTask",
          "type": "object"
        }
      ],
      "title": "Task"
    },
    "callTask": {
      "oneOf": [
        {
          "title": "CallAsyncAPI",
          "$ref": "#/$defs/taskBase",
          "type": "object",
          "required": [
            "call",
            "with"
          ],
          "unevaluatedProperties": false,
          "properties": {
            "call": {
              "type": "string",
              "const": "asyncapi"
            },
            "with": {
              "type": "object",
              "properties": {
                "document": {
                  "$ref": "#/$defs/externalResource",
                  "description": "The document that defines the AsyncAPI operation to call.",
                  "type": "object",
                  "title": "CallAsyncAPIWithDocument"
                },
                "operationRef": {
                  "type": "string",
                  "description": "A reference to the AsyncAPI operation to call."
                },
                "server": {
                  "type": "string",
                  "description": "A a reference to the server to call the specified AsyncAPI operation on. If not set, default to the first server matching the operation's channel."
                },
                "message": {
                  "type": "string",
                  "description": "The name of the message to use. If not set, defaults to the first message defined by the operation."
                },
                "binding": {
                  "type": "string",
                  "description": "The name of the binding to use. If not set, defaults to the first binding defined by the operation."
                },
                "payload": {
                  "type": "object",
                  "description": "The payload to call the AsyncAPI operation with, if any."
                },
                "authentication": {
                  "description": "The authentication policy, if any, to use when calling the AsyncAPI operation.",
                  "oneOf": [
                    {
                      "$ref": "#/$defs/authenticationPolicy",
                      "type": "object"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "title": "CallAsyncAPIWithAuthentication"
                }
              },
              "required": [
                "document",
                "operationRef"
              ],
              "additionalProperties": false,
              "description": "Defines the AsyncAPI call to perform.",
              "title": "CallAsyncAPIWith"
            }
          }
        },
        {
          "title": "CallGRPC",
          "$ref": "#/$defs/taskBase",
          "type": "object",
          "unevaluatedProperties": false,
          "required": [
            "call",
            "with"
          ],
          "properties": {
            "call": {
              "type": "string",
              "const": "grpc"
            },
            "with": {
              "type": "object",
              "properties": {
                "proto": {
                  "$ref": "#/$defs/externalResource",
                  "description": "The proto resource that describes the GRPC service to call.",
                  "type": "object",
                  "title": "CallGRPCWithProto"
                },
                "service": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the GRPC service to call."
                    },
                    "host": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$",
                      "description": "The hostname of the GRPC service to call."
                    },
                    "port": {
                      "type": "integer",
                      "min": 0,
                      "max": 65535,
                      "description": "The port number of the GRPC service to call."
                    },
                    "authentication": {
                      "description": "The endpoint's authentication policy, if any.",
                      "oneOf": [
                        {
                          "$ref": "#/$defs/authenticationPolicy",
                          "type": "object"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "CallGRPCWithServiceAuthentication"
                    }
                  },
                  "required": [
                    "name",
                    "host"
                  ],
                  "title": "CallGRPCWithService"
                },
                "method": {
                  "type": "string",
                  "description": "The name of the method to call on the defined GRPC service."
                },
                "arguments": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "The arguments, if any, to call the method with.",
                  "title": "CallGRPCWithArguments"
                }
              },
              "required": [
                "proto",
                "service",
                "method"
              ],
              "additionalProperties": false,
              "description": "Defines the GRPC call to perform.",
              "title": "CallGRPCWith"
            }
          }
        },
        {
          "title": "CallHTTP",
          "$ref": "#/$defs/taskBase",
          "type": "object",
          "unevaluatedProperties": false,
          "required": [
            "call",
            "with"
          ],
          "properties": {
            "call": {
              "type": "string",
              "const": "http"
            },
            "with": {
              "type": "object",
              "properties": {
                "method": {
                  "type": "string",
                  "description": "The HTTP method of the HTTP request to perform."
                },
                "endpoint": {
                  "description": "The HTTP endpoint to send the request to.",
                  "oneOf": [
                    {
                      "$ref": "#/$defs/endpoint",
                      "type": "object"
                    },
                    {
                      "type": "string",
                      "format": "uri-template"
                    }
                  ],
                  "title": "CallHTTPWithEndpoint"
                },
                "headers": {
                  "type": "object",
                  "description": "A name/value mapping of the headers, if any, of the HTTP request to perform."
                },
                "body": {
                  "description": "The body, if any, of the HTTP request to perform.",
                  "type": "object"
                },
                "output": {
                  "type": "string",
                  "enum": [
                    "raw",
                    "content",
                    "response"
                  ],
                  "description": "The http call output format. Defaults to 'content'."
                }
              },
              "required": [
                "method",
                "endpoint"
              ],
              "additionalProperties": false,
              "description": "Defines the HTTP call to perform.",
              "title": "CallHTTPWith"
            }
          }
        },
        {
          "title": "CallOpenAPI",
          "$ref": "#/$defs/taskBase",
          "type": "object",
          "unevaluatedProperties": false,
          "required": [
            "call",
            "with"
          ],
          "properties": {
            "call": {
              "type": "string",
              "const": "openapi"
            },
            "with": {
              "type": "object",
              "properties": {
                "document": {
                  "$ref": "#/$defs/externalResource",
                  "description": "The document that defines the OpenAPI operation to call.",
                  "type": "object",
                  "title": "CallOpenAPIWithDocument"
                },
                "operationId": {
                  "type": "string",
                  "description": "The id of the OpenAPI operation to call."
                },
                "parameters": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "A name/value mapping of the parameters of the OpenAPI operation to call.",
                  "title": "CallOpenAPIWithParameters"
                },
                "authentication": {
                  "description": "The authentication policy, if any, to use when calling the OpenAPI operation.",
                  "oneOf": [
                    {
                      "$ref": "#/$defs/authenticationPolicy",
                      "type": "object"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "title": "CallOpenAPIWithAuthentication"
                },
                "output": {
                  "type": "string",
                  "enum": [
                    "raw",
                    "content",
                    "response"
                  ],
                  "description": "The http call output format. Defaults to 'content'."
                }
              },
              "required": [
                "document",
                "operationId"
              ],
              "additionalProperties": false,
              "description": "Defines the OpenAPI call to perform.",
              "title": "CallOpenAPIWith"
            }
          }
        },
        {
          "title": "CallFunction",
          "$ref": "#/$defs/taskBase",
          "type": "object",
          "unevaluatedProperties": false,
          "required": [
            "call"
          ],
          "properties": {
            "call": {
              "type": "string",
              "not": {
                "enum": [
                  "asyncapi",
                  "grpc",
                  "http",
                  "openapi"
                ]
              },
              "description": "The name of the function to call."
            },
            "with": {
              "type": "object",
              "additionalProperties": true,
              "description": "A name/value mapping of the parameters, if any, to call the function with.",
              "title": "CallFunctionWith"
            }
          }
        }
      ],
      "title": "CallTask"
    },
    "forkTask": {
      "description": "Allows workflows to execute multiple tasks concurrently and optionally race them against each other, with a single possible winner, which sets the task's output.",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "unevaluatedProperties": false,
      "required": [
        "fork"
      ],
      "properties": {
        "fork": {
          "type": "object",
          "required": [
            "branches"
          ],
          "properties": {
            "branches": {
              "$ref": "#/$defs/taskList",
              "type": "object",
              "title": "ForkTaskForkBranches"
            },
            "compete": {
              "description": "Indicates whether or not the concurrent tasks are racing against each other, with a single possible winner, which sets the composite task's output.",
              "type": "boolean",
              "default": false
            }
          },
          "title": "ForkTaskFork"
        }
      },
      "title": "ForkTask"
    },
    "doTask": {
      "description": "Allows to execute a list of tasks in sequence",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "unevaluatedProperties": false,
      "required": [
        "do"
      ],
      "properties": {
        "do": {
          "$ref": "#/$defs/taskList",
          "type": "object",
          "title": "DoTaskDo"
        }
      },
      "title": "DoTask"
    },
    "emitTask": {
      "description": "Allows workflows to publish events to event brokers or messaging systems, facilitating communication and coordination between different components and services.",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "required": [
        "emit"
      ],
      "unevaluatedProperties": false,
      "properties": {
        "emit": {
          "type": "object",
          "properties": {
            "event": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The event's unique identifier"
                },
                "source": {
                  "type": "string",
                  "format": "uri",
                  "description": "Identifies the context in which an event happened"
                },
                "type": {
                  "type": "string",
                  "description": "This attribute contains a value describing the type of event related to the originating occurrence."
                },
                "time": {
                  "type": "string",
                  "format": "date-time"
                },
                "subject": {
                  "type": "string"
                },
                "datacontenttype": {
                  "type": "string",
                  "description": "Content type of data value. This attribute enables data to carry any type of content, whereby format and encoding might differ from that of the chosen event format."
                },
                "dataschema": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "required": [
                "source",
                "type"
              ],
              "additionalProperties": true,
              "title": "EmitTaskEmitEvent"
            }
          },
          "required": [
            "event"
          ],
          "title": "EmitTaskEmit"
        }
      },
      "title": "EmitTask"
    },
    "forTask": {
      "description": "Allows workflows to iterate over a collection of items, executing a defined set of subtasks for each item in the collection. This task type is instrumental in handling scenarios such as batch processing, data transformation, and repetitive operations across datasets.",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "required": [
        "for",
        "do"
      ],
      "unevaluatedProperties": false,
      "properties": {
        "for": {
          "type": "object",
          "properties": {
            "each": {
              "type": "string",
              "description": "The name of the variable used to store the current item being enumerated.",
              "default": "item"
            },
            "in": {
              "type": "string",
              "description": "A runtime expression used to get the collection to enumerate."
            },
            "at": {
              "type": "string",
              "description": "The name of the variable used to store the index of the current item being enumerated.",
              "default": "index"
            }
          },
          "required": [
            "in"
          ],
          "title": "ForTaskFor"
        },
        "while": {
          "type": "string",
          "description": "A runtime expression that represents the condition, if any, that must be met for the iteration to continue."
        },
        "do": {
          "$ref": "#/$defs/taskList",
          "type": "object",
          "title": "ForTaskDo"
        }
      },
      "title": "ForTask"
    },
    "listenTask": {
      "description": "Provides a mechanism for workflows to await and react to external events, enabling event-driven behavior within workflow systems.",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "required": [
        "listen"
      ],
      "unevaluatedProperties": false,
      "properties": {
        "listen": {
          "type": "object",
          "properties": {
            "to": {
              "$ref": "#/$defs/eventConsumptionStrategy",
              "description": "Defines the event(s) to listen to.",
              "type": "object",
              "title": "ListenTaskListenTo"
            }
          },
          "required": [
            "to"
          ],
          "title": "ListenTaskListen"
        }
      },
      "title": "ListenTask"
    },
    "raiseTask": {
      "description": "Intentionally triggers and propagates errors.",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "required": [
        "raise"
      ],
      "unevaluatedProperties": false,
      "properties": {
        "raise": {
          "type": "object",
          "properties": {
            "error": {
              "$ref": "#/$defs/error",
              "description": "Defines the error to raise.",
              "type": "object",
              "title": "RaiseTaskRaiseError"
            }
          },
          "required": [
            "error"
          ],
          "title": "RaiseTaskRaise"
        }
      },
      "title": "RaiseTask"
    },
    "runTask": {
      "description": "Provides the capability to execute external containers, shell commands, scripts, or workflows.",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "required": [
        "run"
      ],
      "unevaluatedProperties": false,
      "properties": {
        "run": {
          "type": "object",
          "oneOf": [
            {
              "properties": {
                "container": {
                  "type": "object",
                  "properties": {
                    "image": {
                      "type": "string",
                      "description": "The name of the container image to run."
                    },
                    "command": {
                      "type": "string",
                      "description": "The command, if any, to execute on the container"
                    },
                    "ports": {
                      "type": "object",
                      "description": "The container's port mappings, if any."
                    },
                    "volumes": {
                      "type": "object",
                      "description": "The container's volume mappings, if any."
                    },
                    "environment": {
                      "type": "object",
                      "description": "A key/value mapping of the environment variables, if any, to use when running the configured process."
                    }
                  },
                  "required": [
                    "image"
                  ],
                  "title": "RunTaskRunContainer"
                }
              },
              "required": [
                "container"
              ],
              "description": "Enables the execution of external processes encapsulated within a containerized environment.",
              "type": "object"
            },
            {
              "properties": {
                "script": {
                  "type": "object",
                  "properties": {
                    "language": {
                      "type": "string",
                      "description": "The language of the script to run."
                    },
                    "environment": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "A key/value mapping of the environment variables, if any, to use when running the configured process.",
                      "title": "RunTaskRunScriptEnvironment"
                    }
                  },
                  "oneOf": [
                    {
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ],
                      "description": "The script's code.",
                      "type": "object"
                    },
                    {
                      "properties": {
                        "source": {
                          "$ref": "#/$defs/externalResource",
                          "type": "object",
                          "title": "RunTaskRunScriptSource"
                        }
                      },
                      "description": "The script's resource.",
                      "required": [
                        "source"
                      ],
                      "type": "object"
                    }
                  ],
                  "required": [
                    "language"
                  ],
                  "title": "RunTaskRunScript"
                }
              },
              "required": [
                "script"
              ],
              "description": "Enables the execution of custom scripts or code within a workflow, empowering workflows to perform specialized logic, data processing, or integration tasks by executing user-defined scripts written in various programming languages.",
              "type": "object"
            },
            {
              "properties": {
                "shell": {
                  "type": "object",
                  "properties": {
                    "command": {
                      "type": "string",
                      "description": "The shell command to run."
                    },
                    "arguments": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "A list of the arguments of the shell command to run.",
                      "title": "RunTaskRunShellArguments"
                    },
                    "environment": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "A key/value mapping of the environment variables, if any, to use when running the configured process.",
                      "title": "RunTaskRunShellEnvironment"
                    }
                  },
                  "required": [
                    "command"
                  ],
                  "title": "RunTaskRunShell"
                }
              },
              "required": [
                "shell"
              ],
              "description": "Enables the execution of shell commands within a workflow, enabling workflows to interact with the underlying operating system and perform system-level operations, such as file manipulation, environment configuration, or system administration tasks.",
              "type": "object"
            },
            {
              "properties": {
                "workflow": {
                  "type": "object",
                  "properties": {
                    "namespace": {
                      "type": "string",
                      "description": "The namespace the workflow to run belongs to."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the workflow to run."
                    },
                    "version": {
                      "type": "string",
                      "default": "latest",
                      "description": "The version of the workflow to run. Defaults to latest"
                    },
                    "input": {
                      "type": "object",
                      "additionalProperties": true,
                      "description": "The data, if any, to pass as input to the workflow to execute. The value should be validated against the target workflow's input schema, if specified.",
                      "title": "RunTaskRunWorkflowInput"
                    }
                  },
                  "required": [
                    "namespace",
                    "name",
                    "version"
                  ],
                  "title": "RunTaskRunWorkflow"
                }
              },
              "required": [
                "workflow"
              ],
              "description": "Enables the invocation and execution of nested workflows within a parent workflow, facilitating modularization, reusability, and abstraction of complex logic or business processes by encapsulating them into standalone workflow units.",
              "type": "object"
            }
          ],
          "title": "RunTaskRun"
        }
      },
      "title": "RunTask"
    },
    "setTask": {
      "description": "A task used to set data",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "required": [
        "set"
      ],
      "unevaluatedProperties": false,
      "properties": {
        "set": {
          "type": "object",
          "minProperties": 1,
          "additionalProperties": true,
          "description": "The data to set",
          "title": "SetTaskSet"
        }
      },
      "title": "SetTask"
    },
    "switchTask": {
      "description": "Enables conditional branching within workflows, allowing them to dynamically select different paths based on specified conditions or criteria",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "required": [
        "switch"
      ],
      "unevaluatedProperties": false,
      "properties": {
        "switch": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "minProperties": 1,
            "maxProperties": 1,
            "additionalProperties": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The case's name."
                },
                "when": {
                  "type": "string",
                  "description": "A runtime expression used to determine whether or not the case matches."
                },
                "then": {
                  "$ref": "#/$defs/flowDirective",
                  "description": "The flow directive to execute when the case matches.",
                  "type": "object",
                  "title": "SwitchTaskSwitchThen"
                }
              }
            }
          },
          "title": "SwitchTaskSwitch"
        }
      },
      "title": "SwitchTask"
    },
    "tryTask": {
      "description": "Serves as a mechanism within workflows to handle errors gracefully, potentially retrying failed tasks before proceeding with alternate ones.",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "required": [
        "try",
        "catch"
      ],
      "unevaluatedProperties": false,
      "properties": {
        "try": {
          "description": "The task(s) to perform.",
          "$ref": "#/$defs/taskList",
          "type": "object",
          "title": "TryTaskTry"
        },
        "catch": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object"
            },
            "as": {
              "type": "string",
              "description": "The name of the runtime expression variable to save the error as. Defaults to 'error'."
            },
            "when": {
              "type": "string",
              "description": "A runtime expression used to determine whether or not to catch the filtered error"
            },
            "exceptWhen": {
              "type": "string",
              "description": "A runtime expression used to determine whether or not to catch the filtered error"
            },
            "retry": {
              "$ref": "#/$defs/retryPolicy",
              "description": "The retry policy to use, if any, when catching errors.",
              "type": "object",
              "title": "TryTaskCatchRetry"
            },
            "do": {
              "description": "The definition of the task(s) to run when catching an error.",
              "$ref": "#/$defs/taskList",
              "type": "object",
              "title": "TryTaskCatchDo"
            }
          },
          "title": "TryTaskCatch"
        }
      },
      "title": "TryTask"
    },
    "waitTask": {
      "description": "Allows workflows to pause or delay their execution for a specified period of time.",
      "$ref": "#/$defs/taskBase",
      "type": "object",
      "required": [
        "wait"
      ],
      "unevaluatedProperties": false,
      "properties": {
        "wait": {
          "description": "The amount of time to wait.",
          "$ref": "#/$defs/duration",
          "type": "object",
          "title": "WaitTaskWait"
        }
      },
      "title": "WaitTask"
    },
    "flowDirective": {
      "additionalProperties": false,
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "continue",
            "exit",
            "end"
          ],
          "default": "continue"
        },
        {
          "type": "string"
        }
      ],
      "title": "FlowDirective"
    },
    "authenticationPolicy": {
      "type": "object",
      "oneOf": [
        {
          "properties": {
            "basic": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "The username to use."
                },
                "password": {
                  "type": "string",
                  "description": "The password to use."
                }
              },
              "required": [
                "username",
                "password"
              ],
              "title": "AuthenticationPolicyBasic"
            }
          },
          "required": [
            "basic"
          ],
          "description": "Use basic authentication.",
          "type": "object"
        },
        {
          "properties": {
            "bearer": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "description": "The bearer token to use."
                }
              },
              "required": [
                "token"
              ],
              "title": "AuthenticationPolicyBearer"
            }
          },
          "required": [
            "bearer"
          ],
          "description": "Use bearer authentication.",
          "type": "object"
        },
        {
          "properties": {
            "oauth2": {
              "type": "object",
              "properties": {
                "authority": {
                  "type": "string",
                  "format": "uri",
                  "description": "The URI that references the OAuth2 authority to use."
                },
                "grant": {
                  "type": "string",
                  "description": "The grant type to use."
                },
                "client": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The client id to use."
                    },
                    "secret": {
                      "type": "string",
                      "description": "The client secret to use, if any."
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "title": "AuthenticationPolicyOauth2Client"
                },
                "scopes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The scopes, if any, to request the token for."
                },
                "audiences": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "The audiences, if any, to request the token for."
                },
                "username": {
                  "type": "string",
                  "description": "The username to use. Used only if the grant type is Password."
                },
                "password": {
                  "type": "string",
                  "description": "The password to use. Used only if the grant type is Password."
                },
                "subject": {
                  "$ref": "#/$defs/oauth2Token",
                  "description": "The security token that represents the identity of the party on behalf of whom the request is being made.",
                  "type": "object",
                  "title": "AuthenticationPolicyOauth2Subject"
                },
                "actor": {
                  "$ref": "#/$defs/oauth2Token",
                  "description": "The security token that represents the identity of the acting party.",
                  "type": "object",
                  "title": "AuthenticationPolicyOauth2Actor"
                }
              },
              "required": [
                "authority",
                "grant",
                "client"
              ],
              "title": "AuthenticationPolicyOauth2"
            }
          },
          "required": [
            "oauth2"
          ],
          "description": "Use OAUTH2 authentication.",
          "type": "object"
        }
      ],
      "description": "Defines an authentication policy.",
      "title": "AuthenticationPolicy"
    },
    "oauth2Token": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "The security token to use to use."
        },
        "type": {
          "type": "string",
          "description": "The type of the security token to use to use."
        }
      },
      "required": [
        "token",
        "type"
      ],
      "title": "Oauth2Token"
    },
    "duration": {
      "type": "object",
      "minProperties": 1,
      "properties": {
        "days": {
          "type": "integer",
          "description": "Number of days, if any."
        },
        "hours": {
          "type": "integer",
          "description": "Number of days, if any."
        },
        "minutes": {
          "type": "integer",
          "description": "Number of minutes, if any."
        },
        "seconds": {
          "type": "integer",
          "description": "Number of seconds, if any."
        },
        "milliseconds": {
          "type": "integer",
          "description": "Number of milliseconds, if any."
        }
      },
      "description": "The definition of a duration.",
      "title": "Duration"
    },
    "error": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "format": "uri",
          "description": "A URI reference that identifies the error type."
        },
        "status": {
          "type": "integer",
          "description": "The status code generated by the origin for this occurrence of the error."
        },
        "instance": {
          "type": "string",
          "format": "json-pointer",
          "description": "A JSON Pointer used to reference the component the error originates from."
        },
        "title": {
          "type": "string",
          "description": "A short, human-readable summary of the error."
        },
        "detail": {
          "type": "string",
          "description": "A human-readable explanation specific to this occurrence of the error."
        }
      },
      "required": [
        "type",
        "status",
        "instance"
      ],
      "title": "Error"
    },
    "endpoint": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri-template",
          "description": "The endpoint's URI."
        },
        "authentication": {
          "description": "The authentication policy to use.",
          "oneOf": [
            {
              "$ref": "#/$defs/authenticationPolicy",
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "title": "EndpointAuthentication"
        }
      },
      "required": [
        "uri"
      ],
      "title": "Endpoint"
    },
    "eventConsumptionStrategy": {
      "type": "object",
      "oneOf": [
        {
          "properties": {
            "all": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/eventFilter"
              },
              "description": "A list containing all the events that must be consumed.",
              "title": "EventConsumptionStrategyAll"
            }
          },
          "required": [
            "all"
          ],
          "type": "object"
        },
        {
          "properties": {
            "any": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/eventFilter"
              },
              "description": "A list containing any of the events to consume.",
              "title": "EventConsumptionStrategyAny"
            }
          },
          "required": [
            "any"
          ],
          "type": "object"
        },
        {
          "properties": {
            "one": {
              "$ref": "#/$defs/eventFilter",
              "description": "The single event to consume.",
              "type": "object",
              "title": "EventConsumptionStrategyOne"
            }
          },
          "required": [
            "one"
          ],
          "type": "object"
        }
      ],
      "title": "EventConsumptionStrategy"
    },
    "eventFilter": {
      "type": "object",
      "properties": {
        "with": {
          "type": "object",
          "minProperties": 1,
          "properties": {
            "id": {
              "type": "string",
              "description": "The event's unique identifier"
            },
            "source": {
              "type": "string",
              "description": "Identifies the context in which an event happened"
            },
            "type": {
              "type": "string",
              "description": "This attribute contains a value describing the type of event related to the originating occurrence."
            },
            "time": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "datacontenttype": {
              "type": "string",
              "description": "Content type of data value. This attribute enables data to carry any type of content, whereby format and encoding might differ from that of the chosen event format."
            },
            "dataschema": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "description": "An event filter is a mechanism used to selectively process or handle events based on predefined criteria, such as event type, source, or specific attributes.",
          "title": "EventFilterWith"
        },
        "correlate": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "description": "A runtime expression used to extract the correlation value from the filtered event."
              },
              "expect": {
                "type": "string",
                "description": "A constant or a runtime expression, if any, used to determine whether or not the extracted correlation value matches expectations. If not set, the first extracted value will be used as the correlation's expectation."
              }
            },
            "required": [
              "from"
            ]
          },
          "description": "A correlation is a link between events and data, established by mapping event attributes to specific data attributes, allowing for coordinated processing or handling based on event characteristics.",
          "title": "EventFilterCorrelate"
        }
      },
      "required": [
        "with"
      ],
      "description": "An event filter is a mechanism used to selectively process or handle events based on predefined criteria, such as event type, source, or specific attributes.",
      "title": "EventFilter"
    },
    "extension": {
      "type": "object",
      "properties": {
        "extend": {
          "type": "string",
          "enum": [
            "call",
            "composite",
            "emit",
            "for",
            "listen",
            "raise",
            "run",
            "set",
            "switch",
            "try",
            "wait",
            "all"
          ],
          "description": "The type of task to extend."
        },
        "when": {
          "type": "string",
          "description": "A runtime expression, if any, used to determine whether or not the extension should apply in the specified context."
        },
        "before": {
          "description": "The task(s) to execute before the extended task, if any.",
          "$ref": "#/$defs/taskList",
          "type": "object",
          "title": "ExtensionBefore"
        },
        "after": {
          "description": "The task(s) to execute after the extended task, if any.",
          "$ref": "#/$defs/taskList",
          "type": "object",
          "title": "ExtensionAfter"
        }
      },
      "required": [
        "extend"
      ],
      "description": "The definition of a an extension.",
      "title": "Extension"
    },
    "externalResource": {
      "oneOf": [
        {
          "type": "string",
          "format": "uri"
        },
        {
          "type": "object",
          "properties": {
            "uri": {
              "type": "string",
              "format": "uri",
              "description": "The endpoint's URI."
            },
            "authentication": {
              "description": "The authentication policy to use.",
              "oneOf": [
                {
                  "$ref": "#/$defs/authenticationPolicy",
                  "type": "object"
                },
                {
                  "type": "string"
                }
              ],
              "title": "ExternalResourceAuthentication"
            },
            "name": {
              "type": "string",
              "description": "The external resource's name, if any."
            }
          },
          "required": [
            "uri"
          ]
        }
      ],
      "title": "ExternalResource"
    },
    "input": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/$defs/schema",
          "description": "The schema used to describe and validate the input of the workflow or task.",
          "type": "object",
          "title": "InputSchema"
        },
        "from": {
          "type": "string",
          "description": "A runtime expression, if any, used to mutate and/or filter the input of the workflow or task."
        }
      },
      "description": "Configures the input of a workflow or task.",
      "title": "Input"
    },
    "output": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/$defs/schema",
          "description": "The schema used to describe and validate the output of the workflow or task.",
          "type": "object",
          "title": "OutputSchema"
        },
        "as": {
          "type": "string",
          "description": "A runtime expression, if any, used to mutate and/or filter the output of the workflow or task."
        }
      },
      "description": "Configures the output of a workflow or task.",
      "title": "Output"
    },
    "export": {
      "type": "object",
      "properties": {
        "schema": {
          "$ref": "#/$defs/schema",
          "description": "The schema used to describe and validate the workflow context.",
          "type": "object",
          "title": "ExportSchema"
        },
        "as": {
          "type": "string",
          "description": "A runtime expression, if any, used to export the output data to the context."
        }
      },
      "description": "Set the content of the context.",
      "title": "Export"
    },
    "retryPolicy": {
      "type": "object",
      "properties": {
        "when": {
          "type": "string",
          "description": "A runtime expression, if any, used to determine whether or not to retry running the task, in a given context."
        },
        "exceptWhen": {
          "type": "string",
          "description": "A runtime expression used to determine whether or not to retry running the task, in a given context."
        },
        "delay": {
          "$ref": "#/$defs/duration",
          "description": "The duration to wait between retry attempts.",
          "type": "object",
          "title": "RetryPolicyDelay"
        },
        "backoff": {
          "type": "object",
          "oneOf": [
            {
              "properties": {
                "constant": {
                  "type": "object",
                  "description": "The definition of the constant backoff to use, if any."
                }
              },
              "required": [
                "constant"
              ],
              "type": "object"
            },
            {
              "properties": {
                "exponential": {
                  "type": "object",
                  "description": "The definition of the exponential backoff to use, if any."
                }
              },
              "required": [
                "exponential"
              ],
              "type": "object"
            },
            {
              "properties": {
                "linear": {
                  "type": "object",
                  "description": "The definition of the linear backoff to use, if any."
                }
              },
              "required": [
                "linear"
              ],
              "type": "object"
            }
          ],
          "description": "The retry duration backoff.",
          "title": "RetryPolicyBackoff"
        },
        "limit": {
          "type": "object",
          "properties": {
            "attempt": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "The maximum amount of retry attempts, if any."
                },
                "duration": {
                  "$ref": "#/$defs/duration",
                  "description": "The maximum duration for each retry attempt.",
                  "type": "object",
                  "title": "RetryPolicyLimitAttemptDuration"
                }
              },
              "title": "RetryPolicyLimitAttempt"
            },
            "duration": {
              "$ref": "#/$defs/duration",
              "description": "The duration limit, if any, for all retry attempts.",
              "type": "object",
              "title": "RetryPolicyLimitDuration"
            }
          },
          "description": "The retry limit, if any",
          "title": "RetryPolicyLimit"
        },
        "jitter": {
          "type": "object",
          "properties": {
            "from": {
              "$ref": "#/$defs/duration",
              "description": "The minimum duration of the jitter range",
              "type": "object",
              "title": "RetryPolicyJitterFrom"
            },
            "to": {
              "$ref": "#/$defs/duration",
              "description": "The maximum duration of the jitter range",
              "type": "object",
              "title": "RetryPolicyJitterTo"
            }
          },
          "required": [
            "from",
            "to"
          ],
          "description": "The parameters, if any, that control the randomness or variability of the delay between retry attempts.",
          "title": "RetryPolicyJitter"
        }
      },
      "description": "Defines a retry policy.",
      "title": "RetryPolicy"
    },
    "schema": {
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "default": "json",
          "description": "The schema's format. Defaults to 'json'. The (optional) version of the format can be set using `{format}:{version}`."
        }
      },
      "oneOf": [
        {
          "properties": {
            "document": {
              "description": "The schema's inline definition.",
              "type": "object"
            }
          },
          "required": [
            "document"
          ],
          "type": "object"
        },
        {
          "properties": {
            "resource": {
              "$ref": "#/$defs/externalResource",
              "description": "The schema's external resource.",
              "type": "object",
              "title": "SchemaResource"
            }
          },
          "required": [
            "resource"
          ],
          "type": "object"
        }
      ],
      "description": "Represents the definition of a schema.",
      "title": "Schema"
    },
    "timeout": {
      "type": "object",
      "properties": {
        "after": {
          "$ref": "#/$defs/duration",
          "description": "The duration after which to timeout.",
          "type": "object",
          "title": "TimeoutAfter"
        }
      },
      "required": [
        "after"
      ],
      "description": "The definition of a timeout.",
      "title": "Timeout"
    }
  },
  "required": [
    "document",
    "do"
  ],
  "title": ""
}